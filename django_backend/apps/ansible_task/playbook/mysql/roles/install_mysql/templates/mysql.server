#!/bin/sh

# Use LSB init script functions for printing messages, if possible
lsb_functions="/lib/lsb/init-functions"
if test -f $lsb_functions ; then
  . $lsb_functions
else
  log_success_msg()
  {
    echo " SUCCESS! $@"
  }
  log_failure_msg()
  {
    echo " ERROR! $@"
  }
fi

# root
if [ $USER != 'root' ]; then
    log_failure_msg "Please run in as the root."
    exit 1
fi


# 判断输入参数:大于0,要有-P 或者 --port,端口号大于1024
check_status=0
if [ $# -ge 3 ]; then
    if [ "$1" == "-P" ]; then
        check_status=1
        port_arg=$1
        port=$2
        mode=$3
        shift;shift;shift
    fi
fi
mysql_multi_dir=/home/mysql/multi
conf="$mysql_multi_dir/$port/etc/my.cnf"
if [[ $check_status != 0 && (! -f $conf) ]]; then
    log_failure_msg "the file [$conf] is not exists"
    exit
fi


print_defaults="$basedir/bin/my_print_defaults"

ops="start|stop|restart"

basename=`basename "$0"`
help_msg="Usage: $basename -P port {$ops} [$version_desc options]"

if [ $check_status == 0 ]; then
    echo $help_msg
    exit 1
fi

parse_server_arguments() {
for arg do
    case "$arg" in
      --basedir=*)  basedir=`echo "$arg" | sed -e 's/^[^=]*=//'`
                    bindir="$basedir/bin"
        ;;
      --datadir=*)  datadir=`echo "$arg" | sed -e 's/^[^=]*=//'`
        ;;
      --pid_file=*) mysqld_pid_file_path=`echo "$arg" | sed -e 's/^[^=]*=//'`
    ;;
    esac
done
}

parse_server_arguments `$print_defaults -c $conf mysqld`

# Default value, in seconds, afterwhich the script should timeout waiting
# for server start.
# Value here is overriden by value in my.cnf.
# 0 means don't wait at all
# Negative numbers mean to wait indefinitely
lock_file_path="$mysql_multi_dir/$port/lock/mysql.lock"
service_startup_timeout=900
startup_sleep=1


# 无须在脚本中额外设置
#PATH="/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin"
#export PATH

other_args="$*"   # uncommon, but needed when called from an RPM upgrade action
           # Expected: "--skip-networking --skip-grant-tables"
           # They are not checked here, intentionally, as it is the resposibility
           # of the "spec" file author to give correct arguments only.

# 下面这段5行代码,不知道是何用意?暂时保留.
# echo_n和echo_c都输出为空.
case `echo "testing\c"`,`echo -n testing` in
    *c*,-n*) echo_n=   echo_c=     ;;
    *c*,*)   echo_n=-n echo_c=     ;;
    *)       echo_n=   echo_c='\c' ;;
esac

wait_for_pid () {
  verb="$1"           # created | removed
  pid="$2"            # process ID of the program operating on the pid-file
  pid_file_path="$3" # path to the PID file.

  sst_progress_file=$datadir/sst_in_progress
  i=0
  avoid_race_condition="by checking again"

  while test $i -ne $service_startup_timeout ; do

    case "$verb" in
      'created')
        # wait for a PID-file to pop into existence.
        test -s "$pid_file_path" && i='' && break
        ;;
      'removed')
        # wait for this PID-file to disappear
        test ! -s "$pid_file_path" && i='' && break
        ;;
      *)
        echo "wait_for_pid () usage: wait_for_pid created|removed pid pid_file_path"
        exit 1
        ;;
    esac

    # if server isn't running, then pid-file will never be updated
    if test -n "$pid"; then
      if kill -0 "$pid" 2>/dev/null; then
        :  # the server still runs
      else
        # The server may have exited between the last pid-file check and now.  
        if test -n "$avoid_race_condition"; then
          avoid_race_condition=""
          continue  # Check again.
        fi

        # there's nothing that will affect the file.
        log_failure_msg "The server quit without updating PID file ($pid_file_path)."
        return 1  # not waiting any more.
      fi
    fi

    if test -e $sst_progress_file && [ $startup_sleep -ne 10 ];then
        echo "SST in progress, setting sleep higher"
        startup_sleep=10
    fi

    echo $echo_n ".$echo_c"
    i=`expr $i + 1`
    sleep $startup_sleep

  done

  if test -z "$i" ; then
    log_success_msg
    return 0
  elif test -e $sst_progress_file; then 
    log_failure_msg
    return 2
  else
    log_failure_msg
    return 1
  fi
}

check_running() {

    local show_msg=$1

    # First, check to see if pid file exists
    if test -s "$mysqld_pid_file_path" ; then 
        read mysqld_pid < "$mysqld_pid_file_path"
        if kill -0 $mysqld_pid 2>/dev/null ; then 
            log_success_msg "MySQL ($version_desc) running ($mysqld_pid)"
            return 0
        else
            log_failure_msg "MySQL ($version_desc) is not running, but PID file exists"
            return 1
        fi
    else
        # Try to find appropriate mysqld process
        #mysqld_pid=`pidof $libexecdir/mysqld`
        mysqld_pid=

        # test if multiple pids exist
        pid_count=`echo $mysqld_pid | wc -w`
        if test $pid_count -gt 1 ; then
            log_failure_msg "Multiple MySQL running but PID file could not be found ($mysqld_pid)"
            return 5
        elif test -z $mysqld_pid ; then 
            if test -f "$lock_file_path" ; then 
                log_failure_msg "MySQL ($version_desc) is not running, but lock file ($lock_file_path) exists"
                return 2
            fi 
            test $show_msg -eq 1 && log_failure_msg "MySQL ($version_desc) is not running"
            return 3
        else
            log_failure_msg "MySQL ($version_desc) is running but PID file could not be found"
            return 4
        fi
    fi
}

case "$mode" in
  'start')

    check_running 0
    ext_status=$?
    if test $ext_status -ne 3;then 
        exit $ext_status
    fi

    # Start daemon
    if test -e $datadir/sst_in_progress;then 
        echo "Stale sst_in_progress file in datadir"
    fi

    # Safeguard (relative paths, core dumps..)
    cd $basedir

    echo $echo_n "Starting MySQL ($version_desc)"
    if test -x $bindir/mysqld_safe
    then
      # Give extra arguments to mysqld with the my.cnf file. This script
      # may be overwritten at next upgrade.
      $bindir/mysqld_safe --defaults-file="$conf" $other_args >/dev/null 2>&1 &
      wait_for_pid created "$!" "$mysqld_pid_file_path"; return_value=$?
      if [ $return_value == 1 ];then 
          log_failure_msg "MySQL ($version_desc) server startup failed!"
      elif [ $return_value == 2 ];then
          log_failure_msg "MySQL ($version_desc) server startup failed! SST still in progress"
      fi

      # Make lock for RedHat / SuSE
      touch "$lock_file_path"

      exit $return_value
    else
      log_failure_msg "Couldn't find MySQL server ($bindir/mysqld_safe)"
    fi
    ;;
  'stop')
    # Stop daemon. We use a signal here to avoid having to know the
    # root password.
    echo $echo_n "Shutting down MySQL ($version_desc)"
    if test -s "$mysqld_pid_file_path"
    then
      mysqld_pid=`cat "$mysqld_pid_file_path"`

      if (kill -0 $mysqld_pid 2>/dev/null)
      then
        kill $mysqld_pid
        # mysqld should remove the pid file when it exits, so wait for it.
        wait_for_pid removed "$mysqld_pid" "$mysqld_pid_file_path"; return_value=$?
        if [ $return_value != 0 ];then 
            log_failure_msg "MySQL ($version_desc) server stop failed!"
        fi
      else
        log_failure_msg "MySQL ($version_desc) server process #$mysqld_pid is not running!"
        rm "$mysqld_pid_file_path"
      fi

      # Delete lock for RedHat / SuSE
      if test -f "$lock_file_path"
      then
        rm -f "$lock_file_path"
      fi
      exit $return_value
    else
      log_failure_msg "MySQL ($version_desc) PID file could not be found!"
    fi
    ;;
  'restart')
    # Stop the service and regardless of whether it was
    # running or not, start it again.
    if $0 $port_arg $port stop $other_args; then
      $0 $port_arg $port start $other_args
    else
      log_failure_msg "Failed to stop running server, so refusing to try to start."
      exit 1
    fi
    ;;
  'status')
      check_running 1
    ;;
  *)
      # usage
      echo $help_msg
      exit 1
    ;;
esac

exit 0
