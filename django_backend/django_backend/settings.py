"""
Django settings for django_backend project.
Generated by 'django-admin startproject' using Django 2.1.1.
For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import socket
import os
import pymysql
import datetime
pymysql.install_as_MySQLdb()
import logging
logger = logging.getLogger('devops')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l9q4)=0$)sv$85s_ky4%$y^wug^)i47jtm8#hl**)l8b=d8gnp'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps',
    'corsheaders',  #解决跨域失败
    'rest_framework',
    'rest_framework.authtoken',
    'djcelery',
    'app_audit_sql',
    'app_db_dcl',
    'app_web_console',
    'django_cas_ng',
]

# ============================= 认证类型 ===================================
LOGIN_TYPE = "cloud"   # cloud、sso、ldap

# ============================= SSO 认证 begin=============================
CAS_SERVER_URL = 'http://sso-xxxx.xxx.com'
CAS_VERSION = '3'
CAS_APPLY_ATTRIBUTES = True  # 获取用户详细信息
CAS_CHECK_NEXT = lambda _: True  # 解决Non-local url is forbidden异常
AUTHENTICATION_BACKENDS = (
  'django.contrib.auth.backends.ModelBackend',
  'django_cas_ng.backends.CASBackend',
)
# ============================ SSO 认证end =================================

# ===========================JWT认证begin===================================
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 'apps.utils.permission.RbacPermisson',   # 自定义的rbac权限认证，太麻烦，使用url进行权限验证
    )
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=12),         # access token过期时间
    'JWT_ALLOW_REFRESH': True,
    # refresh token过期时间,暂时没想好放在哪个位置调用,必须在access_token过期前前端采用定刷新更新token,感觉比较鸡肋或者是没get到精髓
    'JWT_REFRESH_EXPIRATION_DELTA':datetime.timedelta(days=7),
}

# ============================JWT认证end==========================================


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',   # 一些安全设置，比如XSS脚本过滤
    'django.contrib.sessions.middleware.SessionMiddleware',  # django_session的表
    'corsheaders.middleware.CorsMiddleware',  # 解决跨域问题
    'django.middleware.common.CommonMiddleware',  # url路径'/'处理
    #'django.middleware.csrf.CsrfViewMiddleware',   # 注释掉可以解决前后端分离发送post请求失败问题
    #'django_cas_ng.middleware.CASMiddleware', #sso中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 将代表当前登录用户的用户属性添加到每个传入的 HttpRequest 对象
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.utils.auth.Middleware',  # 自定义中间件登陆认证
    'easyaudit.middleware.easyaudit.EasyAuditMiddleware',    # 操作审计，目前没有审计到操作用户，应该是认证方式的原因，暂时自己实现吧
]


#解决跨域失败，跨域请求允许携带cookie
CORS_ALLOW_CREDENTIALS = True
#如果为True，则没必要设置白名单，所有都可以接受
CORS_ORIGIN_ALLOW_ALL = True
#解决跨域失败，允许跨域请求的方法
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
#解决跨域失败，跨域请求的一些非标准的http请求头
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


ROOT_URLCONF = 'django_backend.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'django_backend.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


################# 通用配置 ##################
#设置django上传数据大小为20M
DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False
STATIC_URL = '/static/'


################# inception配置 ##################

# INCEPTION_ADDRESS = {
#     'inception_host': '127.0.0.1',
#     'inception_port': 3306
# }

INCEPTION_ADDRESS = {
    'inception_host': '47.104.2.74',
    'inception_port': 6669,
}

################# 日志配置 ##################
log_path = os.path.join(BASE_DIR, "logs/")
if not os.path.exists(log_path):
    os.makedirs(log_path)

LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'my_access': {
            'format': '%(asctime)s|%(filename)s:%(lineno)d|%(levelname)s|%(user_name)s|%(http_method)s|%(request_path)s|%(request_status)s|%(request_time)s|%(message)s'
        },
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        'console': {     # 在终端打印
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'
        },
        'default': {    # 默认的
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 日期满足后切割
            'filename': os.path.join(log_path, "access.log"),  # 日志文件
            'when': 'D',
            'interval': 1,
            'backupCount': 365,  # 最多保留几个
            'formatter': 'my_access',
            'encoding': 'utf-8',
        },
        'info': {   # 专门用来记正常日志
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 日期满足后切割
            'filename': os.path.join(log_path, "error.log"),  # 日志文件
            'when': 'D',
            'interval': 1,
            'backupCount': 365,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {   # 专门用来记错误日志
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 日期满足后切割
            'filename': os.path.join(log_path, "error.log"),  # 日志文件
            'when': 'D',
            'interval': 1,
            'backupCount': 365,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'sql_log_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',  # 大小满足后切割
            'filename': os.path.join(log_path, "sql.log"),
            'maxBytes': 1024*1024*5,
            'backupCount': 1,
            'formatter':'standard',
        },
        'inception_execute_log_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, "inception_execute.log"),
            'maxBytes': 1024*1024*5,
            'backupCount': 50,
            'formatter':'simple',
        }
    },
    'loggers': {
        'django.server': {             # http请求,debug为true时打印到console
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'django.db.backends': {             # SQL语句与执行耗时,debug为true时打印到console
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'my_access': {             # 默认的logger应用如下配置
            'handlers': ['default'],  # 上线之后可以把'console'移除
            'level': 'INFO',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'devops': {             # 默认的logger应用如下配置
            'handlers': ['console', 'error','info'],  # 上线之后可以把'console'移除
            'level': 'INFO',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'sql_logger': {
            'handlers': ['sql_log_handler','console'],
            'level': 'INFO',
            'propagate': False
        },
        'inception_execute_logger': {
            'handlers': ['inception_execute_log_handler'],
            'level': 'INFO',
            'propagate': False
        }
    },
}

# ============================================ 项目与环境相关动态配置 =======================================
try:
    csock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    csock.connect(('8.8.8.8',80))
    (ip, port) = csock.getsockname()
    csock.close()
except socket.error as e:
    logger.error(str(e))
pro_host_list = ['47.104.2.74']
if ip in pro_host_list:
    from .pro import *
else:
    from .dev import *